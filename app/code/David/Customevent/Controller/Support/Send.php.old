<?php
namespace David\Customevent\Controller\Support;
use Magento\Framework\App\Filesystem\DirectoryList;
class Send extends \Magento\Framework\App\Action\Action
{
    protected $coreRegistry = null;
    protected $fileFactory;
    protected $dateFilter;
    protected $logger;
    protected $resultPageFactory;
    // private $secret_key = '6Lcqk9UUAAAAAFSK6EEunpW5_LYB-ijr589kFAxx';
    private $fileUploaderFactory;
    private $fileSystem;
	
    public function __construct(
        \Magento\Backend\App\Action\Context $context,
        \Magento\Framework\Registry $coreRegistry,
        \Magento\Framework\App\Response\Http\FileFactory $fileFactory,
        \Magento\Framework\Stdlib\DateTime\Filter\Date $dateFilter,
        \Psr\Log\LoggerInterface $logger,
        \Magento\Framework\View\Result\PageFactory $resultPageFactory,
        \Magento\Framework\Filesystem $fileSystem,
        \Magento\MediaStorage\Model\File\UploaderFactory $fileUploaderFactory
    ) {
        parent::__construct($context);
        $this->fileUploaderFactory = $fileUploaderFactory;
        $this->fileSystem          = $fileSystem;
		$this->coreRegistry 		= $coreRegistry;
        $this->fileFactory 			= $fileFactory;
        $this->dateFilter 			= $dateFilter;
        $this->logger 				= $logger;
        $this->resultPageFactory 	= $resultPageFactory;
    }
 
    /**
     * Rule save action
     *
     * @return void
     */
    public function execute()
    {
        $requestData = $this->getRequest()->getParams();
          
        try {
            if(isset($requestData['token'])){
                // $captcha = $requestData['token'];
                // $verify = json_decode(file_get_contents("https://www.google.com/recaptcha/api/siteverify?secret=".$this->secret_key."&response=$captcha"),true);
                // if($verify['success']){
                    $subject = $requestData['subject'];
                    $message = $requestData['description'];
                    $file = $this->getRequest()->getFiles('attachment');
                    $dataFile = [];
                    if(!empty(trim($file['name']))){
                        try {
							// $writer = new \Zend\Log\Writer\Stream(BP . '/var/log/test.log');
							// $logger = new \Zend\Log\Logger();
							// $logger->addWriter($writer);
							// $logger->info('Your text message');
                        // init uploader model.
                            $uploader = $this->fileUploaderFactory->create(['fileId' => 'attachment']);
                            $uploader->setAllowRenameFiles(true);
                            $uploader->setFilesDispersion(true);
                            $uploader->setAllowCreateFolders(true);
                            $uploader->setAllowedExtensions(['jpg', 'jpeg', 'gif', 'png', 'zip', 'mp4', 'avi', 'wmv']);
                            $path = $this->fileSystem->getDirectoryRead(DirectoryList::MEDIA)->getAbsolutePath('support');
                            $result = $uploader->save($path);
                            $upload_document = 'support'.$uploader->getUploadedFilename();
							
                            $objectManager = \Magento\Framework\App\ObjectManager::getInstance();
                            //$fileUrl = $objectManager->get('\Magento\Store\Model\StoreManagerInterface')->getStore()->getBaseUrl(\Magento\Framework\UrlInterface::URL_TYPE_MEDIA).$upload_document;
                            $fileUrl = $objectManager->get('\Magento\Framework\Filesystem\DirectoryList')->getPath('media') . '/' .$upload_document;

							// $logger->info($fileUrl);
                            $dataFile = [
                                'body' => $objectManager->get('Magento\Framework\Filesystem\Driver\File')->fileGetContents($fileUrl),
                                'name' => $file['name']
                            ];

                           
							// $logger->info($dataFile);
                        }catch (\Exception $e) {
                            $this->messageManager->addError(
                                __('File format not supported.')
                            );
                            $this->_redirect('support');
                            return;
                        }
                    }
                    
                    // $name = array(
                    // 	'name' => $this->getRecipientName(),
                    // 	'email' => $this->getRecipientEmail()
                    // );
                    $classi = $requestData['classifications'];
                    // params of email
                    $data = array();
                    
                    $emailTemplateId = ""; 
                    switch($classi){
                        case 'sales':
                            $emailTemplateId 		= 5;
                        break;
                        case 'warranty':
                            $emailTemplateId 		= 6;
                            $data['order_date'] 	= $requestData['order_date'];
                            $data['order_number'] 	= $requestData['order_number'];
                            $data['product'] 		= $requestData['product'];
                        break;
                        case 'tech':
                            $emailTemplateId = 7;
                            $data['product'] 		= $requestData['product'];
                        break;
                        case 'order_request':
                            $emailTemplateId = 8;
                            $data['order_date'] 	= $requestData['order_date'];
                            $data['order_number'] 	= $requestData['order_number'];
                        break;
                        case 'order_question':
                            $emailTemplateId = 9;
                            $data['order_number'] 	= $requestData['order_number'];
                        break;
                    }
                    
                    $senderInfo = [
                        'name' 	=> 'VoltBikeÂ®',
                        'email' => 'sales@voltbike.com'
                    ];
					//$receiverInfo		=	'dkd.luckystar@gmail.com';// email test;
                    /* $bcc				=	'mailtestdev01@gmail.com,dkd.luckystar@gmail.com';// email test;  */
                    $bcc				=	'';// email test; 
                    $receiverInfo		=	'support@voltbike.com';


                    $data['title'] 			= $subject;
                    $data['description'] 	= $message;
                    $data['contact_name'] 	= $requestData['contact_name'];
                    $data['email'] 			= $requestData['email'];
                    
                    $this->_objectManager->get('David\Customevent\Helper\Email')->sendMail($emailTemplateId,$data,$senderInfo,$receiverInfo,$bcc,$dataFile,$requestData['email']);
                    
                    $this->messageManager->addSuccessMessage(__('You sent the ticket.'));
                    return $this->_redirect('support');
                // }else{
                //     $this->messageManager->addErrorMessage(
                //         __('Verify captcha to submit ticket.')
                //     );
                //     $this->_redirect('support');
                //     return;
                // }
                
            }else{
                $this->messageManager->addErrorMessage(
                    __('Verify captcha to submit ticket.')
                );
                $this->_redirect('support');
                return;
            }
			
        } catch (\Exception $e) {
            $this->messageManager->addErrorMessage(
                __('Something went wrong while sumit ticket. Please review the error log.')
            );
			$this->_redirect('support');
            return;
        }
    }
}
